apply plugin: 'com.android.library'
apply plugin: "build-time-tracker"


archivesBaseName = POM_NAME

dependencies {
    compile  fileTree(dir: 'libs', include: '*.jar')
    compile 'com.android.support:support-v4:21.0.3'
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'com.android.support:support-annotations:23.0.1'
    compile 'com.android.support:multidex:1.0.1'

    testCompile 'junit:junit:4.11'
    // required if you want to use Mockito for unit tests
    testCompile 'org.mockito:mockito-core:1.9.5'
    // required if you want to use Powermock for unit tests
    testCompile 'org.powermock:powermock-module-junit4:1.5.6'
    testCompile 'org.powermock:powermock-api-mockito:1.5.6'

    // required if you want to use Mockito for Android instrumentation tests
    androidTestCompile 'org.mockito:mockito-core:1.9.5'
    androidTestCompile "com.google.dexmaker:dexmaker:1.2"
    androidTestCompile "com.google.dexmaker:dexmaker-mockito:1.2"
}

android {
    compileSdkVersion Integer.parseInt(project.COMPILE_SDK_VERSION)
    buildToolsVersion project.BUILD_TOOLS_VERSION

    defaultConfig {
        versionCode  Integer.parseInt(project.VERSION_CODE)
        versionName  project.VERSION_NAME
        minSdkVersion Integer.parseInt(project.MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.TARGET_SDK_VERSION)

        testApplicationId project.PACKAGE_NAME+".test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        testHandleProfiling true
        testFunctionalTest true
    }

    buildTypes {
        release {
            minifyEnabled false
            consumerProguardFiles 'proguard-rules.txt'
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'com/j256/ormlite/android/LICENSE.txt'
        exclude 'com/j256/ormlite/android/README.txt'
        exclude 'com/j256/ormlite/core/LICENSE.txt'
        exclude 'com/j256/ormlite/core/README.txt'
        exclude 'templates/release-notes.vm'
        exclude 'org/apaches/commons/codec/language/bm/*.txt'
        exclude 'org/apaches/commons/codec/language/*.txt'
    }
    
    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

    android.libraryVariants.all { variant ->

        task("generate${variant.name}Javadoc", type: Javadoc) {
            title = "android lib - $POM_NAME $version API"
            description "Generates Javadoc for $variant.name."
            source = variant.javaCompile.source
            ext.androidJar =
                    "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
            classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
            options {
                locale = 'en_US'
                encoding = 'UTF-8'
                charSet = 'UTF-8'
                links("http://docs.oracle.com/javase/7/docs/api/");
                linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference");
                links("http://ormlite.com/javadoc/ormlite-core/");
                links("http://ormlite.com/javadoc/ormlite-android/");
            }
            exclude '**/BuildConfig.java'
            exclude '**/R.java'
            exclude '**/Log2File.java'
        }
    }
