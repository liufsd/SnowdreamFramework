apply plugin: 'com.android.application'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'net.jokubasdargis.build-timer'

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'com.android.support:support-v4:21.0.3'
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'com.android.support:support-annotations:23.0.1'
    compile 'com.android.support:multidex:1.0.1'
}

android {
    compileSdkVersion Integer.parseInt(project.COMPILE_SDK_VERSION)
    buildToolsVersion project.BUILD_TOOLS_VERSION

    defaultConfig {
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME
        minSdkVersion Integer.parseInt(project.MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.TARGET_SDK_VERSION)
        applicationId project.PACKAGE_NAME

        testApplicationId project.PACKAGE_NAME + ".test"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        testHandleProfiling true
        testFunctionalTest true
    }

    signingConfigs {
        release {
            if (!System.getenv("TRAVIS") && !System.getenv("GITLAB_CI")) {
                storeFile file(System.getenv("KEYSTORE"))
                storePassword System.getenv("KEYSTORE_PASSWORD")
                keyAlias System.getenv("KEY_ALIAS")
                keyPassword System.getenv("KEY_PASSWORD")
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles "${rootDir}/gradle/proguard/proguard-android-app-optimize.txt", 'proguard-rules.txt'
            signingConfig signingConfigs.release
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'com/j256/ormlite/android/LICENSE.txt'
        exclude 'com/j256/ormlite/android/README.txt'
        exclude 'com/j256/ormlite/core/LICENSE.txt'
        exclude 'com/j256/ormlite/core/README.txt'
        exclude 'templates/release-notes.vm'
        exclude 'org/apaches/commons/codec/language/bm/*.txt'
        exclude 'org/apaches/commons/codec/language/*.txt'
    }

    lintOptions {
        abortOnError false
    }
}

android.applicationVariants.all { variant ->
    def apk = variant.outputs[0].outputFile;
    def newName = "";

    newName = apk.name.replace(project.name, POM_NAME + "-v" + android.defaultConfig.versionName);
    newName = newName.replace("-" + variant.buildType.name, "");
    newName = newName.replace(".apk", "-" + variant.buildType.name.toLowerCase() + ".apk");

    variant.outputs[0].outputFile = new File(apk.parentFile, newName);
    if (variant.outputs[0].zipAlign) {
        variant.outputs[0].zipAlign.outputFile = new File(apk.parentFile, newName.replace("-unaligned", ""));
    }
}

android.applicationVariants.all { variant ->

    task("generate${variant.name}Javadoc", type: Javadoc) {
        title = "android lib - $POM_NAME $version API"
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar =
                "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        options {
            locale = 'en_US'
            encoding = 'UTF-8'
            charSet = 'UTF-8'
            links("http://docs.oracle.com/javase/7/docs/api/");
            linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference");
        }
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
        exclude '**/Log2File.java'
    }
}
